// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file sited_io/media/v1/media.proto (package sited_io.media.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Direction } from "../../ordering/v1/ordering_pb.js";
import { PaginationRequest, PaginationResponse } from "../../pagination/v1/pagination_pb.js";

/**
 * @generated from enum sited_io.media.v1.MediaOrderByField
 */
export enum MediaOrderByField {
  /**
   * @generated from enum value: MEDIA_ORDER_BY_FIELD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MEDIA_ORDER_BY_FIELD_CREATED_AT = 1;
   */
  CREATED_AT = 1,

  /**
   * @generated from enum value: MEDIA_ORDER_BY_FIELD_UPDATED_AT = 2;
   */
  UPDATED_AT = 2,

  /**
   * @generated from enum value: MEDIA_ORDER_BY_FIELD_ORDERING = 3;
   */
  ORDERING = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(MediaOrderByField)
proto3.util.setEnumType(MediaOrderByField, "sited_io.media.v1.MediaOrderByField", [
  { no: 0, name: "MEDIA_ORDER_BY_FIELD_UNSPECIFIED" },
  { no: 1, name: "MEDIA_ORDER_BY_FIELD_CREATED_AT" },
  { no: 2, name: "MEDIA_ORDER_BY_FIELD_UPDATED_AT" },
  { no: 3, name: "MEDIA_ORDER_BY_FIELD_ORDERING" },
]);

/**
 * @generated from enum sited_io.media.v1.MediaFilterField
 */
export enum MediaFilterField {
  /**
   * @generated from enum value: MEDIA_FILTER_FIELD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MEDIA_FILTER_FIELD_NAME = 1;
   */
  NAME = 1,

  /**
   * @generated from enum value: MEDIA_FILTER_FIELD_OFFER_ID = 2;
   */
  OFFER_ID = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(MediaFilterField)
proto3.util.setEnumType(MediaFilterField, "sited_io.media.v1.MediaFilterField", [
  { no: 0, name: "MEDIA_FILTER_FIELD_UNSPECIFIED" },
  { no: 1, name: "MEDIA_FILTER_FIELD_NAME" },
  { no: 2, name: "MEDIA_FILTER_FIELD_OFFER_ID" },
]);

/**
 * @generated from message sited_io.media.v1.MediaResponse
 */
export class MediaResponse extends Message<MediaResponse> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  /**
   * @generated from field: repeated string offer_ids = 2;
   */
  offerIds: string[] = [];

  /**
   * @generated from field: string shop_id = 3;
   */
  shopId = "";

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * @generated from field: int64 created_at = 5;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: int64 updated_at = 6;
   */
  updatedAt = protoInt64.zero;

  /**
   * @generated from field: string name = 7;
   */
  name = "";

  /**
   * @generated from field: string file_name = 8;
   */
  fileName = "";

  /**
   * @generated from field: int64 ordering = 9;
   */
  ordering = protoInt64.zero;

  constructor(data?: PartialMessage<MediaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.MediaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "offer_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "shop_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "ordering", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaResponse {
    return new MediaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaResponse {
    return new MediaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaResponse {
    return new MediaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MediaResponse | PlainMessage<MediaResponse> | undefined, b: MediaResponse | PlainMessage<MediaResponse> | undefined): boolean {
    return proto3.util.equals(MediaResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.MediaUpload
 */
export class MediaUpload extends Message<MediaUpload> {
  /**
   * @generated from field: string content_type = 1;
   */
  contentType = "";

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MediaUpload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.MediaUpload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaUpload {
    return new MediaUpload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaUpload {
    return new MediaUpload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaUpload {
    return new MediaUpload().fromJsonString(jsonString, options);
  }

  static equals(a: MediaUpload | PlainMessage<MediaUpload> | undefined, b: MediaUpload | PlainMessage<MediaUpload> | undefined): boolean {
    return proto3.util.equals(MediaUpload, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.CreateMediaRequest
 */
export class CreateMediaRequest extends Message<CreateMediaRequest> {
  /**
   * @generated from field: string shop_id = 1;
   */
  shopId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: optional sited_io.media.v1.MediaUpload file = 3;
   */
  file?: MediaUpload;

  /**
   * @generated from field: string file_name = 4;
   */
  fileName = "";

  constructor(data?: PartialMessage<CreateMediaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.CreateMediaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shop_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file", kind: "message", T: MediaUpload, opt: true },
    { no: 4, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMediaRequest {
    return new CreateMediaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMediaRequest {
    return new CreateMediaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMediaRequest {
    return new CreateMediaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMediaRequest | PlainMessage<CreateMediaRequest> | undefined, b: CreateMediaRequest | PlainMessage<CreateMediaRequest> | undefined): boolean {
    return proto3.util.equals(CreateMediaRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.CreateMediaResponse
 */
export class CreateMediaResponse extends Message<CreateMediaResponse> {
  /**
   * @generated from field: sited_io.media.v1.MediaResponse media = 1;
   */
  media?: MediaResponse;

  constructor(data?: PartialMessage<CreateMediaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.CreateMediaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media", kind: "message", T: MediaResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMediaResponse {
    return new CreateMediaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMediaResponse {
    return new CreateMediaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMediaResponse {
    return new CreateMediaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMediaResponse | PlainMessage<CreateMediaResponse> | undefined, b: CreateMediaResponse | PlainMessage<CreateMediaResponse> | undefined): boolean {
    return proto3.util.equals(CreateMediaResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.GetMediaRequest
 */
export class GetMediaRequest extends Message<GetMediaRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  constructor(data?: PartialMessage<GetMediaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.GetMediaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMediaRequest {
    return new GetMediaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMediaRequest {
    return new GetMediaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMediaRequest {
    return new GetMediaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMediaRequest | PlainMessage<GetMediaRequest> | undefined, b: GetMediaRequest | PlainMessage<GetMediaRequest> | undefined): boolean {
    return proto3.util.equals(GetMediaRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.GetMediaResponse
 */
export class GetMediaResponse extends Message<GetMediaResponse> {
  /**
   * @generated from field: sited_io.media.v1.MediaResponse media = 1;
   */
  media?: MediaResponse;

  constructor(data?: PartialMessage<GetMediaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.GetMediaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media", kind: "message", T: MediaResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMediaResponse {
    return new GetMediaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMediaResponse {
    return new GetMediaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMediaResponse {
    return new GetMediaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMediaResponse | PlainMessage<GetMediaResponse> | undefined, b: GetMediaResponse | PlainMessage<GetMediaResponse> | undefined): boolean {
    return proto3.util.equals(GetMediaResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.DownloadMediaRequest
 */
export class DownloadMediaRequest extends Message<DownloadMediaRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  constructor(data?: PartialMessage<DownloadMediaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.DownloadMediaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadMediaRequest {
    return new DownloadMediaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadMediaRequest {
    return new DownloadMediaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadMediaRequest {
    return new DownloadMediaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadMediaRequest | PlainMessage<DownloadMediaRequest> | undefined, b: DownloadMediaRequest | PlainMessage<DownloadMediaRequest> | undefined): boolean {
    return proto3.util.equals(DownloadMediaRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.DownloadMediaResponse
 */
export class DownloadMediaResponse extends Message<DownloadMediaResponse> {
  /**
   * @generated from field: string download_url = 1;
   */
  downloadUrl = "";

  constructor(data?: PartialMessage<DownloadMediaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.DownloadMediaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadMediaResponse {
    return new DownloadMediaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadMediaResponse {
    return new DownloadMediaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadMediaResponse {
    return new DownloadMediaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadMediaResponse | PlainMessage<DownloadMediaResponse> | undefined, b: DownloadMediaResponse | PlainMessage<DownloadMediaResponse> | undefined): boolean {
    return proto3.util.equals(DownloadMediaResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.MediaOrderBy
 */
export class MediaOrderBy extends Message<MediaOrderBy> {
  /**
   * @generated from field: sited_io.media.v1.MediaOrderByField field = 1;
   */
  field = MediaOrderByField.UNSPECIFIED;

  /**
   * @generated from field: sited_io.ordering.v1.Direction direction = 2;
   */
  direction = Direction.UNSPECIFIED;

  constructor(data?: PartialMessage<MediaOrderBy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.MediaOrderBy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "enum", T: proto3.getEnumType(MediaOrderByField) },
    { no: 2, name: "direction", kind: "enum", T: proto3.getEnumType(Direction) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaOrderBy {
    return new MediaOrderBy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaOrderBy {
    return new MediaOrderBy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaOrderBy {
    return new MediaOrderBy().fromJsonString(jsonString, options);
  }

  static equals(a: MediaOrderBy | PlainMessage<MediaOrderBy> | undefined, b: MediaOrderBy | PlainMessage<MediaOrderBy> | undefined): boolean {
    return proto3.util.equals(MediaOrderBy, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.MediaFilter
 */
export class MediaFilter extends Message<MediaFilter> {
  /**
   * @generated from field: sited_io.media.v1.MediaFilterField field = 1;
   */
  field = MediaFilterField.UNSPECIFIED;

  /**
   * @generated from field: string query = 2;
   */
  query = "";

  constructor(data?: PartialMessage<MediaFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.MediaFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "enum", T: proto3.getEnumType(MediaFilterField) },
    { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MediaFilter {
    return new MediaFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MediaFilter {
    return new MediaFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MediaFilter {
    return new MediaFilter().fromJsonString(jsonString, options);
  }

  static equals(a: MediaFilter | PlainMessage<MediaFilter> | undefined, b: MediaFilter | PlainMessage<MediaFilter> | undefined): boolean {
    return proto3.util.equals(MediaFilter, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.ListMediaRequest
 */
export class ListMediaRequest extends Message<ListMediaRequest> {
  /**
   * @generated from field: string shop_id = 1;
   */
  shopId = "";

  /**
   * @generated from field: optional sited_io.pagination.v1.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;

  /**
   * @generated from field: optional sited_io.media.v1.MediaOrderBy order_by = 3;
   */
  orderBy?: MediaOrderBy;

  /**
   * @generated from field: optional sited_io.media.v1.MediaFilter filter = 4;
   */
  filter?: MediaFilter;

  constructor(data?: PartialMessage<ListMediaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.ListMediaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shop_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PaginationRequest, opt: true },
    { no: 3, name: "order_by", kind: "message", T: MediaOrderBy, opt: true },
    { no: 4, name: "filter", kind: "message", T: MediaFilter, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMediaRequest {
    return new ListMediaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMediaRequest {
    return new ListMediaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMediaRequest {
    return new ListMediaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMediaRequest | PlainMessage<ListMediaRequest> | undefined, b: ListMediaRequest | PlainMessage<ListMediaRequest> | undefined): boolean {
    return proto3.util.equals(ListMediaRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.ListMediaResponse
 */
export class ListMediaResponse extends Message<ListMediaResponse> {
  /**
   * @generated from field: repeated sited_io.media.v1.MediaResponse medias = 1;
   */
  medias: MediaResponse[] = [];

  /**
   * @generated from field: sited_io.pagination.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;

  constructor(data?: PartialMessage<ListMediaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.ListMediaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "medias", kind: "message", T: MediaResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMediaResponse {
    return new ListMediaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMediaResponse {
    return new ListMediaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMediaResponse {
    return new ListMediaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMediaResponse | PlainMessage<ListMediaResponse> | undefined, b: ListMediaResponse | PlainMessage<ListMediaResponse> | undefined): boolean {
    return proto3.util.equals(ListMediaResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.ListAccessibleMediaRequest
 */
export class ListAccessibleMediaRequest extends Message<ListAccessibleMediaRequest> {
  /**
   * @generated from field: optional sited_io.pagination.v1.PaginationRequest pagination = 2;
   */
  pagination?: PaginationRequest;

  /**
   * @generated from field: optional sited_io.media.v1.MediaOrderBy order_by = 3;
   */
  orderBy?: MediaOrderBy;

  /**
   * @generated from field: optional sited_io.media.v1.MediaFilter filter = 4;
   */
  filter?: MediaFilter;

  constructor(data?: PartialMessage<ListAccessibleMediaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.ListAccessibleMediaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "pagination", kind: "message", T: PaginationRequest, opt: true },
    { no: 3, name: "order_by", kind: "message", T: MediaOrderBy, opt: true },
    { no: 4, name: "filter", kind: "message", T: MediaFilter, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccessibleMediaRequest {
    return new ListAccessibleMediaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccessibleMediaRequest {
    return new ListAccessibleMediaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccessibleMediaRequest {
    return new ListAccessibleMediaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccessibleMediaRequest | PlainMessage<ListAccessibleMediaRequest> | undefined, b: ListAccessibleMediaRequest | PlainMessage<ListAccessibleMediaRequest> | undefined): boolean {
    return proto3.util.equals(ListAccessibleMediaRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.ListAccessibleMediaResponse
 */
export class ListAccessibleMediaResponse extends Message<ListAccessibleMediaResponse> {
  /**
   * @generated from field: repeated sited_io.media.v1.MediaResponse medias = 1;
   */
  medias: MediaResponse[] = [];

  /**
   * @generated from field: sited_io.pagination.v1.PaginationResponse pagination = 2;
   */
  pagination?: PaginationResponse;

  constructor(data?: PartialMessage<ListAccessibleMediaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.ListAccessibleMediaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "medias", kind: "message", T: MediaResponse, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PaginationResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAccessibleMediaResponse {
    return new ListAccessibleMediaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAccessibleMediaResponse {
    return new ListAccessibleMediaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAccessibleMediaResponse {
    return new ListAccessibleMediaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAccessibleMediaResponse | PlainMessage<ListAccessibleMediaResponse> | undefined, b: ListAccessibleMediaResponse | PlainMessage<ListAccessibleMediaResponse> | undefined): boolean {
    return proto3.util.equals(ListAccessibleMediaResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.UpdateMediaRequest
 */
export class UpdateMediaRequest extends Message<UpdateMediaRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional sited_io.media.v1.MediaUpload file = 3;
   */
  file?: MediaUpload;

  /**
   * @generated from field: optional string file_name = 4;
   */
  fileName?: string;

  constructor(data?: PartialMessage<UpdateMediaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.UpdateMediaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "file", kind: "message", T: MediaUpload, opt: true },
    { no: 4, name: "file_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMediaRequest {
    return new UpdateMediaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMediaRequest {
    return new UpdateMediaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMediaRequest {
    return new UpdateMediaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMediaRequest | PlainMessage<UpdateMediaRequest> | undefined, b: UpdateMediaRequest | PlainMessage<UpdateMediaRequest> | undefined): boolean {
    return proto3.util.equals(UpdateMediaRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.UpdateMediaResponse
 */
export class UpdateMediaResponse extends Message<UpdateMediaResponse> {
  /**
   * @generated from field: sited_io.media.v1.MediaResponse media = 1;
   */
  media?: MediaResponse;

  constructor(data?: PartialMessage<UpdateMediaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.UpdateMediaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media", kind: "message", T: MediaResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMediaResponse {
    return new UpdateMediaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMediaResponse {
    return new UpdateMediaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMediaResponse {
    return new UpdateMediaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMediaResponse | PlainMessage<UpdateMediaResponse> | undefined, b: UpdateMediaResponse | PlainMessage<UpdateMediaResponse> | undefined): boolean {
    return proto3.util.equals(UpdateMediaResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.DeleteMediaRequest
 */
export class DeleteMediaRequest extends Message<DeleteMediaRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  constructor(data?: PartialMessage<DeleteMediaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.DeleteMediaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMediaRequest {
    return new DeleteMediaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMediaRequest {
    return new DeleteMediaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMediaRequest {
    return new DeleteMediaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMediaRequest | PlainMessage<DeleteMediaRequest> | undefined, b: DeleteMediaRequest | PlainMessage<DeleteMediaRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMediaRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.DeleteMediaResponse
 */
export class DeleteMediaResponse extends Message<DeleteMediaResponse> {
  constructor(data?: PartialMessage<DeleteMediaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.DeleteMediaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMediaResponse {
    return new DeleteMediaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMediaResponse {
    return new DeleteMediaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMediaResponse {
    return new DeleteMediaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMediaResponse | PlainMessage<DeleteMediaResponse> | undefined, b: DeleteMediaResponse | PlainMessage<DeleteMediaResponse> | undefined): boolean {
    return proto3.util.equals(DeleteMediaResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.InitiateMultipartUploadRequest
 */
export class InitiateMultipartUploadRequest extends Message<InitiateMultipartUploadRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  /**
   * @generated from field: string content_type = 2;
   */
  contentType = "";

  constructor(data?: PartialMessage<InitiateMultipartUploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.InitiateMultipartUploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitiateMultipartUploadRequest {
    return new InitiateMultipartUploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitiateMultipartUploadRequest {
    return new InitiateMultipartUploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitiateMultipartUploadRequest {
    return new InitiateMultipartUploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitiateMultipartUploadRequest | PlainMessage<InitiateMultipartUploadRequest> | undefined, b: InitiateMultipartUploadRequest | PlainMessage<InitiateMultipartUploadRequest> | undefined): boolean {
    return proto3.util.equals(InitiateMultipartUploadRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.InitiateMultipartUploadResponse
 */
export class InitiateMultipartUploadResponse extends Message<InitiateMultipartUploadResponse> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string upload_id = 2;
   */
  uploadId = "";

  constructor(data?: PartialMessage<InitiateMultipartUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.InitiateMultipartUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upload_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitiateMultipartUploadResponse {
    return new InitiateMultipartUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitiateMultipartUploadResponse {
    return new InitiateMultipartUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitiateMultipartUploadResponse {
    return new InitiateMultipartUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitiateMultipartUploadResponse | PlainMessage<InitiateMultipartUploadResponse> | undefined, b: InitiateMultipartUploadResponse | PlainMessage<InitiateMultipartUploadResponse> | undefined): boolean {
    return proto3.util.equals(InitiateMultipartUploadResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.PutMultipartChunkRequest
 */
export class PutMultipartChunkRequest extends Message<PutMultipartChunkRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  /**
   * @generated from field: string upload_id = 2;
   */
  uploadId = "";

  /**
   * @generated from field: uint32 part_number = 3;
   */
  partNumber = 0;

  /**
   * @generated from field: bytes chunk = 4;
   */
  chunk = new Uint8Array(0);

  constructor(data?: PartialMessage<PutMultipartChunkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.PutMultipartChunkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upload_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "part_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "chunk", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutMultipartChunkRequest {
    return new PutMultipartChunkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutMultipartChunkRequest {
    return new PutMultipartChunkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutMultipartChunkRequest {
    return new PutMultipartChunkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutMultipartChunkRequest | PlainMessage<PutMultipartChunkRequest> | undefined, b: PutMultipartChunkRequest | PlainMessage<PutMultipartChunkRequest> | undefined): boolean {
    return proto3.util.equals(PutMultipartChunkRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.Part
 */
export class Part extends Message<Part> {
  /**
   * @generated from field: uint32 part_number = 1;
   */
  partNumber = 0;

  /**
   * @generated from field: string etag = 2;
   */
  etag = "";

  constructor(data?: PartialMessage<Part>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.Part";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "part_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "etag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Part {
    return new Part().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Part {
    return new Part().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Part {
    return new Part().fromJsonString(jsonString, options);
  }

  static equals(a: Part | PlainMessage<Part> | undefined, b: Part | PlainMessage<Part> | undefined): boolean {
    return proto3.util.equals(Part, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.PutMultipartChunkResponse
 */
export class PutMultipartChunkResponse extends Message<PutMultipartChunkResponse> {
  /**
   * @generated from field: sited_io.media.v1.Part part = 1;
   */
  part?: Part;

  constructor(data?: PartialMessage<PutMultipartChunkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.PutMultipartChunkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "part", kind: "message", T: Part },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutMultipartChunkResponse {
    return new PutMultipartChunkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutMultipartChunkResponse {
    return new PutMultipartChunkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutMultipartChunkResponse {
    return new PutMultipartChunkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutMultipartChunkResponse | PlainMessage<PutMultipartChunkResponse> | undefined, b: PutMultipartChunkResponse | PlainMessage<PutMultipartChunkResponse> | undefined): boolean {
    return proto3.util.equals(PutMultipartChunkResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.CompleteMultipartUploadRequest
 */
export class CompleteMultipartUploadRequest extends Message<CompleteMultipartUploadRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  /**
   * @generated from field: string upload_id = 2;
   */
  uploadId = "";

  /**
   * @generated from field: repeated sited_io.media.v1.Part parts = 3;
   */
  parts: Part[] = [];

  constructor(data?: PartialMessage<CompleteMultipartUploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.CompleteMultipartUploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upload_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parts", kind: "message", T: Part, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompleteMultipartUploadRequest {
    return new CompleteMultipartUploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompleteMultipartUploadRequest {
    return new CompleteMultipartUploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompleteMultipartUploadRequest {
    return new CompleteMultipartUploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CompleteMultipartUploadRequest | PlainMessage<CompleteMultipartUploadRequest> | undefined, b: CompleteMultipartUploadRequest | PlainMessage<CompleteMultipartUploadRequest> | undefined): boolean {
    return proto3.util.equals(CompleteMultipartUploadRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.CompleteMultipartUploadResponse
 */
export class CompleteMultipartUploadResponse extends Message<CompleteMultipartUploadResponse> {
  constructor(data?: PartialMessage<CompleteMultipartUploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.CompleteMultipartUploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompleteMultipartUploadResponse {
    return new CompleteMultipartUploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompleteMultipartUploadResponse {
    return new CompleteMultipartUploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompleteMultipartUploadResponse {
    return new CompleteMultipartUploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CompleteMultipartUploadResponse | PlainMessage<CompleteMultipartUploadResponse> | undefined, b: CompleteMultipartUploadResponse | PlainMessage<CompleteMultipartUploadResponse> | undefined): boolean {
    return proto3.util.equals(CompleteMultipartUploadResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.AddMediaToOfferRequest
 */
export class AddMediaToOfferRequest extends Message<AddMediaToOfferRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  /**
   * @generated from field: string offer_id = 2;
   */
  offerId = "";

  /**
   * @generated from field: optional int64 ordering = 3;
   */
  ordering?: bigint;

  constructor(data?: PartialMessage<AddMediaToOfferRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.AddMediaToOfferRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "offer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ordering", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMediaToOfferRequest {
    return new AddMediaToOfferRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMediaToOfferRequest {
    return new AddMediaToOfferRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMediaToOfferRequest {
    return new AddMediaToOfferRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddMediaToOfferRequest | PlainMessage<AddMediaToOfferRequest> | undefined, b: AddMediaToOfferRequest | PlainMessage<AddMediaToOfferRequest> | undefined): boolean {
    return proto3.util.equals(AddMediaToOfferRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.AddMediaToOfferResponse
 */
export class AddMediaToOfferResponse extends Message<AddMediaToOfferResponse> {
  constructor(data?: PartialMessage<AddMediaToOfferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.AddMediaToOfferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddMediaToOfferResponse {
    return new AddMediaToOfferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddMediaToOfferResponse {
    return new AddMediaToOfferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddMediaToOfferResponse {
    return new AddMediaToOfferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddMediaToOfferResponse | PlainMessage<AddMediaToOfferResponse> | undefined, b: AddMediaToOfferResponse | PlainMessage<AddMediaToOfferResponse> | undefined): boolean {
    return proto3.util.equals(AddMediaToOfferResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.UpdateMediaOfferOrderingRequest
 */
export class UpdateMediaOfferOrderingRequest extends Message<UpdateMediaOfferOrderingRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  /**
   * @generated from field: string offer_id = 2;
   */
  offerId = "";

  /**
   * @generated from field: int64 ordering = 3;
   */
  ordering = protoInt64.zero;

  constructor(data?: PartialMessage<UpdateMediaOfferOrderingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.UpdateMediaOfferOrderingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "offer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ordering", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMediaOfferOrderingRequest {
    return new UpdateMediaOfferOrderingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMediaOfferOrderingRequest {
    return new UpdateMediaOfferOrderingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMediaOfferOrderingRequest {
    return new UpdateMediaOfferOrderingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMediaOfferOrderingRequest | PlainMessage<UpdateMediaOfferOrderingRequest> | undefined, b: UpdateMediaOfferOrderingRequest | PlainMessage<UpdateMediaOfferOrderingRequest> | undefined): boolean {
    return proto3.util.equals(UpdateMediaOfferOrderingRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.UpdateMediaOfferOrderingResponse
 */
export class UpdateMediaOfferOrderingResponse extends Message<UpdateMediaOfferOrderingResponse> {
  constructor(data?: PartialMessage<UpdateMediaOfferOrderingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.UpdateMediaOfferOrderingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMediaOfferOrderingResponse {
    return new UpdateMediaOfferOrderingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMediaOfferOrderingResponse {
    return new UpdateMediaOfferOrderingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMediaOfferOrderingResponse {
    return new UpdateMediaOfferOrderingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMediaOfferOrderingResponse | PlainMessage<UpdateMediaOfferOrderingResponse> | undefined, b: UpdateMediaOfferOrderingResponse | PlainMessage<UpdateMediaOfferOrderingResponse> | undefined): boolean {
    return proto3.util.equals(UpdateMediaOfferOrderingResponse, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.RemoveMediaFromOfferRequest
 */
export class RemoveMediaFromOfferRequest extends Message<RemoveMediaFromOfferRequest> {
  /**
   * @generated from field: string media_id = 1;
   */
  mediaId = "";

  /**
   * @generated from field: string offer_id = 2;
   */
  offerId = "";

  constructor(data?: PartialMessage<RemoveMediaFromOfferRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.RemoveMediaFromOfferRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "media_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "offer_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveMediaFromOfferRequest {
    return new RemoveMediaFromOfferRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveMediaFromOfferRequest {
    return new RemoveMediaFromOfferRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveMediaFromOfferRequest {
    return new RemoveMediaFromOfferRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveMediaFromOfferRequest | PlainMessage<RemoveMediaFromOfferRequest> | undefined, b: RemoveMediaFromOfferRequest | PlainMessage<RemoveMediaFromOfferRequest> | undefined): boolean {
    return proto3.util.equals(RemoveMediaFromOfferRequest, a, b);
  }
}

/**
 * @generated from message sited_io.media.v1.RemoveMediaFromOfferResponse
 */
export class RemoveMediaFromOfferResponse extends Message<RemoveMediaFromOfferResponse> {
  constructor(data?: PartialMessage<RemoveMediaFromOfferResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.media.v1.RemoveMediaFromOfferResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveMediaFromOfferResponse {
    return new RemoveMediaFromOfferResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveMediaFromOfferResponse {
    return new RemoveMediaFromOfferResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveMediaFromOfferResponse {
    return new RemoveMediaFromOfferResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveMediaFromOfferResponse | PlainMessage<RemoveMediaFromOfferResponse> | undefined, b: RemoveMediaFromOfferResponse | PlainMessage<RemoveMediaFromOfferResponse> | undefined): boolean {
    return proto3.util.equals(RemoveMediaFromOfferResponse, a, b);
  }
}

