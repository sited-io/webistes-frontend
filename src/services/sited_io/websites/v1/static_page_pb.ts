// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file sited_io/websites/v1/static_page.proto (package sited_io.websites.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message sited_io.websites.v1.StaticPageResponse
 */
export class StaticPageResponse extends Message<StaticPageResponse> {
  /**
   * @generated from field: int64 page_id = 1;
   */
  pageId = protoInt64.zero;

  /**
   * @generated from field: string website_id = 2;
   */
  websiteId = "";

  /**
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * @generated from field: repeated sited_io.websites.v1.Component components = 4;
   */
  components: Component[] = [];

  constructor(data?: PartialMessage<StaticPageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.StaticPageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "website_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "components", kind: "message", T: Component, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StaticPageResponse {
    return new StaticPageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StaticPageResponse {
    return new StaticPageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StaticPageResponse {
    return new StaticPageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StaticPageResponse | PlainMessage<StaticPageResponse> | undefined, b: StaticPageResponse | PlainMessage<StaticPageResponse> | undefined): boolean {
    return proto3.util.equals(StaticPageResponse, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.GetStaticPageRequest
 */
export class GetStaticPageRequest extends Message<GetStaticPageRequest> {
  /**
   * @generated from field: int64 page_id = 1;
   */
  pageId = protoInt64.zero;

  constructor(data?: PartialMessage<GetStaticPageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.GetStaticPageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStaticPageRequest {
    return new GetStaticPageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStaticPageRequest {
    return new GetStaticPageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStaticPageRequest {
    return new GetStaticPageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetStaticPageRequest | PlainMessage<GetStaticPageRequest> | undefined, b: GetStaticPageRequest | PlainMessage<GetStaticPageRequest> | undefined): boolean {
    return proto3.util.equals(GetStaticPageRequest, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.GetStaticPageResponse
 */
export class GetStaticPageResponse extends Message<GetStaticPageResponse> {
  /**
   * @generated from field: sited_io.websites.v1.StaticPageResponse static_page = 1;
   */
  staticPage?: StaticPageResponse;

  constructor(data?: PartialMessage<GetStaticPageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.GetStaticPageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "static_page", kind: "message", T: StaticPageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetStaticPageResponse {
    return new GetStaticPageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetStaticPageResponse {
    return new GetStaticPageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetStaticPageResponse {
    return new GetStaticPageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetStaticPageResponse | PlainMessage<GetStaticPageResponse> | undefined, b: GetStaticPageResponse | PlainMessage<GetStaticPageResponse> | undefined): boolean {
    return proto3.util.equals(GetStaticPageResponse, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.UpdateStaticPageRequest
 */
export class UpdateStaticPageRequest extends Message<UpdateStaticPageRequest> {
  /**
   * @generated from field: int64 page_id = 1;
   */
  pageId = protoInt64.zero;

  /**
   * @generated from field: repeated sited_io.websites.v1.Component components = 2;
   */
  components: Component[] = [];

  constructor(data?: PartialMessage<UpdateStaticPageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.UpdateStaticPageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "components", kind: "message", T: Component, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateStaticPageRequest {
    return new UpdateStaticPageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateStaticPageRequest {
    return new UpdateStaticPageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateStaticPageRequest {
    return new UpdateStaticPageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateStaticPageRequest | PlainMessage<UpdateStaticPageRequest> | undefined, b: UpdateStaticPageRequest | PlainMessage<UpdateStaticPageRequest> | undefined): boolean {
    return proto3.util.equals(UpdateStaticPageRequest, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.UpdateStaticPageResponse
 */
export class UpdateStaticPageResponse extends Message<UpdateStaticPageResponse> {
  /**
   * @generated from field: sited_io.websites.v1.StaticPageResponse static_page = 1;
   */
  staticPage?: StaticPageResponse;

  constructor(data?: PartialMessage<UpdateStaticPageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.UpdateStaticPageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "static_page", kind: "message", T: StaticPageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateStaticPageResponse {
    return new UpdateStaticPageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateStaticPageResponse {
    return new UpdateStaticPageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateStaticPageResponse {
    return new UpdateStaticPageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateStaticPageResponse | PlainMessage<UpdateStaticPageResponse> | undefined, b: UpdateStaticPageResponse | PlainMessage<UpdateStaticPageResponse> | undefined): boolean {
    return proto3.util.equals(UpdateStaticPageResponse, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.Component
 */
export class Component extends Message<Component> {
  /**
   * @generated from field: string component_id = 1;
   */
  componentId = "";

  /**
   * @generated from field: sited_io.websites.v1.ComponentType component_type = 2;
   */
  componentType?: ComponentType;

  constructor(data?: PartialMessage<Component>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.Component";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "component_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "component_type", kind: "message", T: ComponentType },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Component {
    return new Component().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Component {
    return new Component().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Component {
    return new Component().fromJsonString(jsonString, options);
  }

  static equals(a: Component | PlainMessage<Component> | undefined, b: Component | PlainMessage<Component> | undefined): boolean {
    return proto3.util.equals(Component, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.ComponentType
 */
export class ComponentType extends Message<ComponentType> {
  /**
   * @generated from oneof sited_io.websites.v1.ComponentType.inner
   */
  inner: {
    /**
     * @generated from field: sited_io.websites.v1.HeaderComponent header = 1;
     */
    value: HeaderComponent;
    case: "header";
  } | {
    /**
     * @generated from field: sited_io.websites.v1.ParagraphComponent paragraph = 2;
     */
    value: ParagraphComponent;
    case: "paragraph";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ComponentType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.ComponentType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: HeaderComponent, oneof: "inner" },
    { no: 2, name: "paragraph", kind: "message", T: ParagraphComponent, oneof: "inner" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ComponentType {
    return new ComponentType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ComponentType {
    return new ComponentType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ComponentType {
    return new ComponentType().fromJsonString(jsonString, options);
  }

  static equals(a: ComponentType | PlainMessage<ComponentType> | undefined, b: ComponentType | PlainMessage<ComponentType> | undefined): boolean {
    return proto3.util.equals(ComponentType, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.HeaderComponent
 */
export class HeaderComponent extends Message<HeaderComponent> {
  /**
   * @generated from field: int32 level = 1;
   */
  level = 0;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<HeaderComponent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.HeaderComponent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeaderComponent {
    return new HeaderComponent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeaderComponent {
    return new HeaderComponent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeaderComponent {
    return new HeaderComponent().fromJsonString(jsonString, options);
  }

  static equals(a: HeaderComponent | PlainMessage<HeaderComponent> | undefined, b: HeaderComponent | PlainMessage<HeaderComponent> | undefined): boolean {
    return proto3.util.equals(HeaderComponent, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.ParagraphComponent
 */
export class ParagraphComponent extends Message<ParagraphComponent> {
  /**
   * @generated from field: repeated sited_io.websites.v1.InlineElement content = 1;
   */
  content: InlineElement[] = [];

  constructor(data?: PartialMessage<ParagraphComponent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.ParagraphComponent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: InlineElement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParagraphComponent {
    return new ParagraphComponent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParagraphComponent {
    return new ParagraphComponent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParagraphComponent {
    return new ParagraphComponent().fromJsonString(jsonString, options);
  }

  static equals(a: ParagraphComponent | PlainMessage<ParagraphComponent> | undefined, b: ParagraphComponent | PlainMessage<ParagraphComponent> | undefined): boolean {
    return proto3.util.equals(ParagraphComponent, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.InlineElement
 */
export class InlineElement extends Message<InlineElement> {
  /**
   * @generated from oneof sited_io.websites.v1.InlineElement.element_type
   */
  elementType: {
    /**
     * @generated from field: sited_io.websites.v1.TextElement text = 1;
     */
    value: TextElement;
    case: "text";
  } | {
    /**
     * @generated from field: sited_io.websites.v1.LinkElement link = 2;
     */
    value: LinkElement;
    case: "link";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<InlineElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.InlineElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "message", T: TextElement, oneof: "element_type" },
    { no: 2, name: "link", kind: "message", T: LinkElement, oneof: "element_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InlineElement {
    return new InlineElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InlineElement {
    return new InlineElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InlineElement {
    return new InlineElement().fromJsonString(jsonString, options);
  }

  static equals(a: InlineElement | PlainMessage<InlineElement> | undefined, b: InlineElement | PlainMessage<InlineElement> | undefined): boolean {
    return proto3.util.equals(InlineElement, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.TextElement
 */
export class TextElement extends Message<TextElement> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<TextElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.TextElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextElement {
    return new TextElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextElement {
    return new TextElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextElement {
    return new TextElement().fromJsonString(jsonString, options);
  }

  static equals(a: TextElement | PlainMessage<TextElement> | undefined, b: TextElement | PlainMessage<TextElement> | undefined): boolean {
    return proto3.util.equals(TextElement, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.LinkElement
 */
export class LinkElement extends Message<LinkElement> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<LinkElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.LinkElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinkElement {
    return new LinkElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinkElement {
    return new LinkElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinkElement {
    return new LinkElement().fromJsonString(jsonString, options);
  }

  static equals(a: LinkElement | PlainMessage<LinkElement> | undefined, b: LinkElement | PlainMessage<LinkElement> | undefined): boolean {
    return proto3.util.equals(LinkElement, a, b);
  }
}

