// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file sited_io/websites/v1/domain.proto (package sited_io.websites.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum sited_io.websites.v1.DomainStatus
 */
export enum DomainStatus {
  /**
   * @generated from enum value: DOMAIN_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DOMAIN_STATUS_INTERNAL = 1;
   */
  INTERNAL = 1,

  /**
   * @generated from enum value: DOMAIN_STATUS_PENDING = 2;
   */
  PENDING = 2,

  /**
   * @generated from enum value: DOMAIN_STATUS_ACTIVE = 3;
   */
  ACTIVE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DomainStatus)
proto3.util.setEnumType(DomainStatus, "sited_io.websites.v1.DomainStatus", [
  { no: 0, name: "DOMAIN_STATUS_UNSPECIFIED" },
  { no: 1, name: "DOMAIN_STATUS_INTERNAL" },
  { no: 2, name: "DOMAIN_STATUS_PENDING" },
  { no: 3, name: "DOMAIN_STATUS_ACTIVE" },
]);

/**
 * @generated from message sited_io.websites.v1.DomainResponse
 */
export class DomainResponse extends Message<DomainResponse> {
  /**
   * @generated from field: int64 domain_id = 1;
   */
  domainId = protoInt64.zero;

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * @generated from field: sited_io.websites.v1.DomainStatus status = 3;
   */
  status = DomainStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<DomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.DomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(DomainStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DomainResponse {
    return new DomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DomainResponse {
    return new DomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DomainResponse {
    return new DomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DomainResponse | PlainMessage<DomainResponse> | undefined, b: DomainResponse | PlainMessage<DomainResponse> | undefined): boolean {
    return proto3.util.equals(DomainResponse, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.CreateDomainRequest
 */
export class CreateDomainRequest extends Message<CreateDomainRequest> {
  /**
   * @generated from field: string website_id = 1;
   */
  websiteId = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  constructor(data?: PartialMessage<CreateDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.CreateDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "website_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDomainRequest {
    return new CreateDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDomainRequest {
    return new CreateDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDomainRequest {
    return new CreateDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDomainRequest | PlainMessage<CreateDomainRequest> | undefined, b: CreateDomainRequest | PlainMessage<CreateDomainRequest> | undefined): boolean {
    return proto3.util.equals(CreateDomainRequest, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.CreateDomainResponse
 */
export class CreateDomainResponse extends Message<CreateDomainResponse> {
  /**
   * @generated from field: sited_io.websites.v1.DomainResponse domain = 1;
   */
  domain?: DomainResponse;

  constructor(data?: PartialMessage<CreateDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.CreateDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "message", T: DomainResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDomainResponse {
    return new CreateDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDomainResponse {
    return new CreateDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDomainResponse {
    return new CreateDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDomainResponse | PlainMessage<CreateDomainResponse> | undefined, b: CreateDomainResponse | PlainMessage<CreateDomainResponse> | undefined): boolean {
    return proto3.util.equals(CreateDomainResponse, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.CheckDomainStatusRequest
 */
export class CheckDomainStatusRequest extends Message<CheckDomainStatusRequest> {
  /**
   * @generated from field: int64 domain_id = 1;
   */
  domainId = protoInt64.zero;

  constructor(data?: PartialMessage<CheckDomainStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.CheckDomainStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckDomainStatusRequest {
    return new CheckDomainStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckDomainStatusRequest {
    return new CheckDomainStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckDomainStatusRequest {
    return new CheckDomainStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckDomainStatusRequest | PlainMessage<CheckDomainStatusRequest> | undefined, b: CheckDomainStatusRequest | PlainMessage<CheckDomainStatusRequest> | undefined): boolean {
    return proto3.util.equals(CheckDomainStatusRequest, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.CheckDomainStatusResponse
 */
export class CheckDomainStatusResponse extends Message<CheckDomainStatusResponse> {
  /**
   * @generated from field: sited_io.websites.v1.DomainResponse domain = 1;
   */
  domain?: DomainResponse;

  constructor(data?: PartialMessage<CheckDomainStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.CheckDomainStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "message", T: DomainResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckDomainStatusResponse {
    return new CheckDomainStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckDomainStatusResponse {
    return new CheckDomainStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckDomainStatusResponse {
    return new CheckDomainStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckDomainStatusResponse | PlainMessage<CheckDomainStatusResponse> | undefined, b: CheckDomainStatusResponse | PlainMessage<CheckDomainStatusResponse> | undefined): boolean {
    return proto3.util.equals(CheckDomainStatusResponse, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.DeleteDomainRequest
 */
export class DeleteDomainRequest extends Message<DeleteDomainRequest> {
  /**
   * @generated from field: int64 domain_id = 1;
   */
  domainId = protoInt64.zero;

  constructor(data?: PartialMessage<DeleteDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.DeleteDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDomainRequest {
    return new DeleteDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDomainRequest {
    return new DeleteDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDomainRequest {
    return new DeleteDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDomainRequest | PlainMessage<DeleteDomainRequest> | undefined, b: DeleteDomainRequest | PlainMessage<DeleteDomainRequest> | undefined): boolean {
    return proto3.util.equals(DeleteDomainRequest, a, b);
  }
}

/**
 * @generated from message sited_io.websites.v1.DeleteDomainResponse
 */
export class DeleteDomainResponse extends Message<DeleteDomainResponse> {
  constructor(data?: PartialMessage<DeleteDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.websites.v1.DeleteDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteDomainResponse {
    return new DeleteDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteDomainResponse {
    return new DeleteDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteDomainResponse {
    return new DeleteDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteDomainResponse | PlainMessage<DeleteDomainResponse> | undefined, b: DeleteDomainResponse | PlainMessage<DeleteDomainResponse> | undefined): boolean {
    return proto3.util.equals(DeleteDomainResponse, a, b);
  }
}

