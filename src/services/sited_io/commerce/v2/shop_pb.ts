// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file sited_io/commerce/v2/shop.proto (package sited_io.commerce.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Offer } from "./offer_pb.js";

/**
 * @generated from message sited_io.commerce.v2.Shop
 */
export class Shop extends Message<Shop> {
  /**
   * @generated from field: string shop_id = 1;
   */
  shopId = "";

  /**
   * @generated from field: string owner = 2;
   */
  owner = "";

  /**
   * @generated from field: string website_id = 3;
   */
  websiteId = "";

  /**
   * @generated from field: repeated sited_io.commerce.v2.Offer offers = 4;
   */
  offers: Offer[] = [];

  constructor(data?: PartialMessage<Shop>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.commerce.v2.Shop";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shop_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "website_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "offers", kind: "message", T: Offer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Shop {
    return new Shop().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Shop {
    return new Shop().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Shop {
    return new Shop().fromJsonString(jsonString, options);
  }

  static equals(a: Shop | PlainMessage<Shop> | undefined, b: Shop | PlainMessage<Shop> | undefined): boolean {
    return proto3.util.equals(Shop, a, b);
  }
}

