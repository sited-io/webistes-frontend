// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file sited_io/report/v1/report.proto (package sited_io.report.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum sited_io.report.v1.ReportType
 */
export enum ReportType {
  /**
   * @generated from enum value: REPORT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: REPORT_TYPE_BUG = 1;
   */
  BUG = 1,

  /**
   * @generated from enum value: REPORT_TYPE_FEATURE_REQUEST = 2;
   */
  FEATURE_REQUEST = 2,

  /**
   * @generated from enum value: REPORT_TYPE_QUESTION = 3;
   */
  QUESTION = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ReportType)
proto3.util.setEnumType(ReportType, "sited_io.report.v1.ReportType", [
  { no: 0, name: "REPORT_TYPE_UNSPECIFIED" },
  { no: 1, name: "REPORT_TYPE_BUG" },
  { no: 2, name: "REPORT_TYPE_FEATURE_REQUEST" },
  { no: 3, name: "REPORT_TYPE_QUESTION" },
]);

/**
 * @generated from message sited_io.report.v1.CreateReportRequest
 */
export class CreateReportRequest extends Message<CreateReportRequest> {
  /**
   * @generated from field: sited_io.report.v1.ReportType report_type = 1;
   */
  reportType = ReportType.UNSPECIFIED;

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string content = 3;
   */
  content = "";

  constructor(data?: PartialMessage<CreateReportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.report.v1.CreateReportRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "report_type", kind: "enum", T: proto3.getEnumType(ReportType) },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateReportRequest {
    return new CreateReportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateReportRequest {
    return new CreateReportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateReportRequest {
    return new CreateReportRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateReportRequest | PlainMessage<CreateReportRequest> | undefined, b: CreateReportRequest | PlainMessage<CreateReportRequest> | undefined): boolean {
    return proto3.util.equals(CreateReportRequest, a, b);
  }
}

/**
 * @generated from message sited_io.report.v1.CreateReportResponse
 */
export class CreateReportResponse extends Message<CreateReportResponse> {
  /**
   * @generated from field: optional string link = 1;
   */
  link?: string;

  constructor(data?: PartialMessage<CreateReportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sited_io.report.v1.CreateReportResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "link", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateReportResponse {
    return new CreateReportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateReportResponse {
    return new CreateReportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateReportResponse {
    return new CreateReportResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateReportResponse | PlainMessage<CreateReportResponse> | undefined, b: CreateReportResponse | PlainMessage<CreateReportResponse> | undefined): boolean {
    return proto3.util.equals(CreateReportResponse, a, b);
  }
}

